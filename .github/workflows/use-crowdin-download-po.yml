# Distributed under the OSI-approved BSD 3-Clause License.
# See accompanying file LICENSE.txt for details.

name: use-crowdin-download-po

on:
  workflow_call:
    inputs:
      ENABLE:
        type: string
        required: false
        default: 'true'
        description: >
          [Optional] Whether to enable the job (e.g., 'true' or 'false'). Defaults to 'true'.
      RUNNER:
        type: string
        required: false
        default: 'ubuntu-latest'
        description: >
          [Optional] The runner image for executing the job. Defaults to 'ubuntu-latest'.
      CHECKOUT:
        type: string
        required: false
        default: '${{ github.ref }}'
        description: >
          [Optional] The git reference to be checked out. Defaults to '\$\{\{ github.ref \}\}'
      CMAKE_VERSION:
        type: string
        required: false
        default: ''
        description: >
          [Optional] The version of the CMake command. Defaults to an empty string.
      CROWDIN_VERSION:
        type: string
        required: false
        default: ''
        description: >
          [Optional] The version of the Crowdin CLI command. Defaults to an empty string.
      VERSION:
        type: string
        required: true    # [Required]
        description: >
          [Required] The version of the documentation.
      LANGUAGE:
        type: string
        required: true    # [Required]
        description: >
          [Required] The language of the documentation.
      MODE_OF_UPDATE:
        type: string
        required: true    # [Required]
        description: >
          [Required] The mode of updating .pot and .po files.
      ACTOR_NAME:
        type: string
        required: true    # [Required]
        description: >
          [Required] The user name of the GitHub actor.
      ACTOR_EMAIL:
        type: string
        required: true    # [Required]
        description: >
          [Required] The user email of the GitHub actor.
      CROWDIN_PROJECT_ID:
        type: string
        required: true    # [Required]
        description: >
          [Required] The numeric ID of the Crowdin project.
      CROWDIN_BASE_URL:
        type: string
        required: true    # [Required]
        description: >
          [Required] The base URL of Crowdin server for API requests execution.
      GPG_FINGERPRINT:
        type: string
        required: true    # [Required]
        description: >
          [Required] The fingerprint used for identifying the GPG signing key.
    secrets:
      ACTOR_GITHUB_TOKEN:
        required: true    # [Required]
        description: >
          [Required] The personal access token of the GitHub actor.
      CROWDIN_PERSONAL_TOKEN:
        required: true    # [Required]
        description: >
          [Required] The personal access token for Crowdin authentication.
      GPG_PRIVATE_KEY:
        required: true    # [Required]
        description: >
          [Required] The ASCII-armored GPG private key.
      GPG_PASSPHRASE:
        required: true    # [Required]
        description: >
          [Required] The passphrase of the GPG private key.

jobs:
  crowdin-download-po:
    if: ${{ inputs.ENABLE == 'true' }}
    runs-on: ${{ inputs.RUNNER }}
    steps:
      - name: Print Contexts/Inputs/Secrets
        shell: bash
        run: |
          echo "[Contexts]"
          echo "github.job = ${{ github.job }}"
          echo "github.ref = ${{ github.ref }}"
          echo "github.ref_name = ${{ github.ref_name }}"
          echo "github.event_name = ${{ github.event_name }}"
          echo "github.event.action = ${{ github.event.action }}"
          echo "github.event.number = ${{ github.event.number }}"
          echo "github.workflow = ${{ github.workflow }}"
          echo "github.workflow_ref = ${{ github.workflow_ref }}"
          echo "github.run_id = ${{ github.run_id }}"
          echo "github.run_number = ${{ github.run_number }}"
          echo "github.run_attempt = ${{ github.run_attempt }}"
          echo "github.server_url = ${{ github.server_url }}"
          echo "github.repository = ${{ github.repository }}"
          echo "github.workspace = ${{ github.workspace }}"
          echo "[Inputs]"
          echo "inputs.ENABLE = ${{ inputs.ENABLE }}"
          echo "inputs.RUNNER = ${{ inputs.RUNNER }}"
          echo "inputs.CHECKOUT = ${{ inputs.CHECKOUT }}"
          echo "inputs.CMAKE_VERSION = ${{ inputs.CMAKE_VERSION }}"
          echo "inputs.CROWDIN_VERSION = ${{ inputs.CROWDIN_VERSION }}"
          echo "inputs.VERSION = ${{ inputs.VERSION }}"
          echo "inputs.LANGUAGE = ${{ inputs.LANGUAGE }}"
          echo "inputs.MODE_OF_UPDATE = ${{ inputs.MODE_OF_UPDATE }}"
          echo "inputs.ACTOR_NAME = ${{ inputs.ACTOR_NAME }}"
          echo "inputs.ACTOR_EMAIL = ${{ inputs.ACTOR_EMAIL }}"
          echo "inputs.CROWDIN_PROJECT_ID = ${{ inputs.CROWDIN_PROJECT_ID }}"
          echo "inputs.CROWDIN_BASE_URL = ${{ inputs.CROWDIN_BASE_URL }}"
          echo "inputs.GPG_FINGERPRINT = ${{ inputs.GPG_FINGERPRINT }}"
          echo "[Secrets]"
          echo "secrets.ACTOR_GITHUB_TOKEN = ${{ secrets.ACTOR_GITHUB_TOKEN }}"
          echo "secrets.CROWDIN_PERSONAL_TOKEN = ${{ secrets.CROWDIN_PERSONAL_TOKEN }}"
          echo "secrets.GPG_PRIVATE_KEY = ${{ secrets.GPG_PRIVATE_KEY }}"
          echo "secrets.GPG_PASSPHRASE = ${{ secrets.GPG_PASSPHRASE }}"

      - name: Checkout to '${{ inputs.CHECKOUT }}'
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.CHECKOUT }}
          token: ${{ secrets.ACTOR_GITHUB_TOKEN }}
          submodules: true
          fetch-depth: 0

      - name: Import GPG key for Signing Commit
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
          fingerprint: ${{ inputs.GPG_FINGERPRINT }}
          git_user_signingkey: true
          git_commit_gpgsign: true

      - name: List all GPG keys
        run: |
          gpg --list-secret-keys

      - name: Install CMake
        uses: ltdorgtest/ci-common/.github/actions/install-cmake@main
        with:
          cmake-version: ${{ inputs.CMAKE_VERSION }}

      - name: Install Gettext
        uses: ltdorgtest/ci-common/.github/actions/install-gettext@main

      - name: Install Crowdin
        uses: ltdorgtest/ci-common/.github/actions/install-crowdin@main
        with:
          crowdin-version: ${{ inputs.CROWDIN_VERSION }}

      - name: Get Other Caches from the versions.json file
        id: gocv
        uses: ltdorgtest/ci-common/.github/actions/get-other-caches-from-versions-file@main
        with:
          version: ${{ inputs.VERSION }}
          versions-file: 'versions.json'

      - name: Configure with '${{ inputs.LANGUAGE }}' preset for '${{ inputs.VERSION }}' version
        uses: ltdorgtest/ci-common/.github/actions/cmake-configure@main
        with:
          config-preset: ${{ inputs.LANGUAGE }}
          cache-version: ${{ inputs.VERSION }}
          cache-version-compendium: ${{ steps.gocv.outputs.VERSION_COMPENDIUM }}
          cache-mode-of-update: ${{ inputs.MODE_OF_UPDATE }}
          cache-auto-depend: 'OFF'

      - name: Build the 'gettext_update_po' target
        uses: ltdorgtest/ci-common/.github/actions/cmake-build-target@main
        with:
          build-directory: out/build/${{ inputs.LANGUAGE }}
          build-target: 'gettext_update_po'

      - name: Build the 'crowdin_download_po' target
        uses: ltdorgtest/ci-common/.github/actions/cmake-build-target@main
        with:
          build-directory: out/build/${{ inputs.LANGUAGE }}
          build-target: 'crowdin_download_po'
        env:
          CROWDIN_PROJECT_ID: ${{ inputs.CROWDIN_PROJECT_ID }}
          CROWDIN_PERSONAL_TOKEN: ${{ secrets.CROWDIN_PERSONAL_TOKEN }}
          CROWDIN_BASE_URL: ${{ inputs.CROWDIN_BASE_URL }}

      - name: Get CROWDIN_STATUS_PROGRESS of the '${{ inputs.VERSION }}' branch
        id: gtpp
        uses: ltdorgtest/ci-common/.github/actions/get-crowdin-status-progress@main
        with:
          crowdin-config-file: 'l10n/${{ inputs.VERSION }}/crowdin.yml'
          crowdin-branch-name: ${{ inputs.VERSION }}
          crowdin-no-progress: true
          crowdin-verbose: true
        env:
          CROWDIN_PROJECT_ID: ${{ inputs.CROWDIN_PROJECT_ID }}
          CROWDIN_PERSONAL_TOKEN: ${{ secrets.CROWDIN_PERSONAL_TOKEN }}
          CROWDIN_BASE_URL: ${{ inputs.CROWDIN_BASE_URL }}

      - name: Build the 'gettext_statistics' target
        uses: ltdorgtest/ci-common/.github/actions/cmake-build-target@main
        with:
          build-directory: out/build/${{ inputs.LANGUAGE }}
          build-target: 'gettext_statistics'

      - name: Get the Current Job's Context
        id: gcjc
        uses: qoomon/actions--context@v4
        with:
          token: ${{ secrets.ACTOR_GITHUB_TOKEN }}

      - name: Check Outputs of the Current Job's Context
        shell: bash
        run: |
          echo "Job Name:     ${{ steps.gcjc.outputs.job_name }}"
          echo "Job ID:       ${{ steps.gcjc.outputs.job_id }}"
          echo "Job URL:      ${{ steps.gcjc.outputs.job_url }}"
          echo "Run ID:       ${{ steps.gcjc.outputs.run_id }}"
          echo "Run Attempt:  ${{ steps.gcjc.outputs.run_attempt }}"
          echo "Run Number:   ${{ steps.gcjc.outputs.run_number }}"
          echo "Run URL:      ${{ steps.gcjc.outputs.run_url }}"

      - name: Set up mutex for 'l10n' branch
        uses: ben-z/gh-action-mutex@v1.0.0-alpha.9
        with:
          branch: 'mutex/l10n'
          repo-token: ${{ secrets.ACTOR_GITHUB_TOKEN }}

      - name: Add and Commit Changes
        id: acc
        uses: EndBug/add-and-commit@v9
        with:
          cwd: './l10n'
          add: './${{ inputs.VERSION }}'
          pull: '--rebase --autostash'  # required 'actions/checkout' with 'fetch-depth: 0'
          author_name: ${{ inputs.ACTOR_NAME }}
          author_email: ${{ inputs.ACTOR_EMAIL }}
          message: |
            🌐 tr(${{ inputs.VERSION }}): download '${{ inputs.LANGUAGE }}' translations from Crowdin

            ${{ steps.gtpp.outputs.CROWDIN_STATUS_PROGRESS }}

            Created by the GitHub Actions:

            - File: ${{ github.server_url }}/${{ github.repository }}/actions/workflows/${{ github.workflow }}.yml
            - Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            - Job: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}/job/${{ steps.gcjc.outputs.job_id }}

      - name: Check Outputs of the Commit
        if: ${{ steps.acc.outputs.committed == 'true' }}
        shell: bash
        run: |
          echo "Commit's SHA = ${{ steps.acc.outputs.commit_long_sha }}"
          echo "Commit's URL = ${{ github.server_url }}/${{ github.repository }}/commit/${{ steps.acc.outputs.commit_long_sha }}"
