# Distributed under the OSI-approved BSD 3-Clause License.
# See accompanying file LICENSE.txt for details.

name: get-version-array-from-versions-file

description: Get the Version List from versions.json

inputs:
  type:
    required: true    # [required]
    description: >
      Specifies the extraction mode. Accepted values are "group" for aggregating versions across a version group, or "single" for fetching a specific version.
  version:
    required: true    # [required]
    description: >
       The version identifier to search for when operating in "single" mode.
  version-group:
    required: true    # [required]
    description: >
      The version group used for extraction when in "group" mode.
  version-filter:
    required: true    # [required]
    description: >
      Possible values are: 'all', 'gettext', and 'crowdin'. This input filters the version objects based on their 'VERSION_COMPENDIUM' content.
  versions-file:
    required: false
    default: 'versions.json'
    description: >
      The path to the JSON file that contains version information. Defaults to 'versions.json'.
  working-directory:
    required: false
    default: ${{ github.workspace }}
    description: >
      The directory from which commands will be executed or files located. Defaults to '${{ github.workspace }}'.

outputs:
  VERSION_NUM:
    value: ${{ steps.gvav.outputs.VERSION_NUM }}
    description: >
      The total count of version entries extracted from the JSON file.
  VERSION_ARRAY:
    value: ${{ steps.gvav.outputs.VERSION_ARRAY }}
    description: >
      A JSON array containing the list of versions extracted based on the provided criteria and filters.

runs:
  using: composite
  steps:
    - name: Get VERSION_ARRAY from versions.json
      id: gvav
      shell: bash
      run: |
        TYPE="${{ inputs.type }}"
        VERSION="${{ inputs.version }}"
        VERSION_GROUP="${{ inputs.version-group }}"
        VERSION_FILTER="${{ inputs.version-filter }}"
        VERSIONS_FILE="${{ inputs.versions-file }}"
        WORKING_DIRECTORY=$(echo "${{ inputs.working-directory }}" | sed 's#\\#/#g' | sed 's#^\([A-Za-z]\):#/\L\1#')

        cd "${WORKING_DIRECTORY}"

        if [[ "${TYPE}" == "group" ]]; then
          if [[ "${VERSION_GROUP}" == "all" ]]; then
            VERSION_GROUP_FILTER=""
          else
            VERSION_GROUP_FILTER="\"${VERSION_GROUP}\""
          fi
          if [[ "${VERSION_FILTER}" == "all" ]]; then
            JQ_FILTER="[.[${VERSION_GROUP_FILTER}] | map(.)] | add"
          elif [[ "${VERSION_FILTER}" == "gettext" ]]; then
            JQ_FILTER="[.[${VERSION_GROUP_FILTER}] | map(select(.VERSION_COMPENDIUM != \"\") | .)] | add"
          elif [[ "${VERSION_FILTER}" == "crowdin" ]]; then
            JQ_FILTER="[.[${VERSION_GROUP_FILTER}] | map(select(.VERSION_COMPENDIUM == \"\") | .)] | add"
          else
            echo "Error: Invalid VERSION_FILTER value. (${VERSION_FILTER})" >&2
            exit 1
          fi
          JQ_FILE="${VERSIONS_FILE}"
          OBJECT_LIST=$(jq -c "${JQ_FILTER}" "${JQ_FILE}")
          VERSION_ARRAY=$(echo "${OBJECT_LIST}" | jq -c "[.[].VERSION]")
        elif [[ "${TYPE}" == "single" ]]; then
          if [[ "${VERSION_FILTER}" == "all" ]]; then
            JQ_FILTER="[.[] | map(.)] | add"
          elif [[ "${VERSION_FILTER}" == "gettext" ]]; then
            JQ_FILTER="[.[] | map(select(.VERSION_COMPENDIUM != \"\") | .)] | add"
          elif [[ "${VERSION_FILTER}" == "crowdin" ]]; then
            JQ_FILTER="[.[] | map(select(.VERSION_COMPENDIUM == \"\") | .)] | add"
          else
            echo "Error: Invalid VERSION_FILTER value. (${VERSION_FILTER})" >&2
            exit 1
          fi
          JQ_FILE="${VERSIONS_FILE}"
          OBJECT_LIST=$(jq -c "${JQ_FILTER}" "${JQ_FILE}")
          VERSION_VALUE=$(echo "${OBJECT_LIST}" | jq -r ".[] | select(.VERSION == \"${VERSION}\") | .VERSION")
          if [[ "${VERSION_VALUE}" != "" ]]; then
            echo "VERSION '${VERSION}' is found in the list."
          else
            echo "Error: VERSION '${VERSION}' is NOT found in the list." >&2
            exit 1
          fi
          VERSION_ARRAY="[ \"${VERSION_VALUE}\" ]"
        else
          echo "Error: Invalid TYPE value. (${TYPE})" >&2
          exit 1
        fi

        VERSION_NUM=$(jq "length" <<< "${VERSION_ARRAY}")

        echo "VERSION_NUM=${VERSION_NUM}" >> ${GITHUB_OUTPUT}
        echo "VERSION_NUM:"
        echo "${VERSION_NUM}"

        echo "VERSION_ARRAY=${VERSION_ARRAY}" >> ${GITHUB_OUTPUT}
        echo "VERSION_ARRAY:"
        echo "${VERSION_ARRAY}" | jq "."
